version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Installing npm dependencies
          command: npm install
      - run:
          name: Resetting package-lock changes
          command: git checkout -- package-lock.json
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Continuous integration tests
      - run:
          name: Linting commit message
          command: git log --format=%B -n 1 $CIRCLE_SHA1 | npx commitlint

      # Build
      - run:
          name: Transpiling source code
          command: npm run -s compile

      # Test
      - run:
          name: Linting source files
          command: npm run -s lint -- --format junit --output-file ~/reports/eslint.xml
          when: always

      - run:
          name: Checking type annotations
          command: npm run -s flow -- status
          when: always

      - run:
          name: Running tests
          command: npm run -s test -- --tap | npx tap-xunit > ~/reports/ava.xml
          when: always

      # Store Results
      - store_test_results:
          path: ~/reports
          when: always
      - store_artifacts:
          path: ~/reports
          when: always

      # Deployment
      - add_ssh_keys
      - deploy:
          name: Deploy changes
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ] || [ "${CIRCLE_BRANCH}" == "beta" ]; then
              echo "Not setup yet" && exit 1
              echo "Setting up git user"
              git config --global user.email circleci@circleci && git config --global user.name CircleCI && git remote --v

              echo "Logging in to npm"
              echo "$NPM_TOKEN" > ./.npmrc

              echo "Bumping version number"
              if [ $CIRCLE_BRANCH = 'master' ]; then
                npx standard-version --message "chore(release): Release %s [ci skip]"
              else
                npx standard-version --message "chore(release): Release %s [ci skip]" --prerelease beta;
              fi

              echo "Pushing version bump"
              git push origin $CIRCLE_BRANCH

              echo "Creating git tag"
              version=$(node -e "console.log(require('./package.json').version)")
              git add -f out;
              git checkout -b release-$(git rev-parse HEAD);
              git commit -m "chore(release): Add v$version release files [ci skip]";
              git tag -a "v$version" -m "chore(release): Add v$version release tag [ci skip]";

              echo "Publishing to npm"
              if [ $CIRCLE_BRANCH = 'master' ]; then
                npm publish --access public
              else
                npm publish --tag beta --access public
              fi

              echo "Uploading new tag"
              git push --tags

              echo "Creating GitHub release"
              CONVENTIONAL_GITHUB_RELEASER_TOKEN=$GITHUB_TOKEN npx conventional-github-releaser -p angular
            else
              echo "Not on release branch. Skipping."
            fi
